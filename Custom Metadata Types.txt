/* Custom Setting */
1.Summary
    Create custom sets of data, as well as create and associate custom data for an organization, profile, or specific user.
    All custom settings data is exposed in the application cache so can be access without any query.

 2.Visibility
    control the visibility : public,protected.

 3.Types
    List Custom :
        Reusable set of static data across org to all user.
    Hierarchy custom setting :
        Built-in hierarchical logic that lets you personalize settings for specific profiles or users.

4.Fields
    No Relationship fields.

5.DML Opration Not Possible (modification of record)

6.Note
    Custom Setting are not visible in test class.
    Deployement issue : Failure happen more upon in production.
    Dataloader to deploye record from one org to another org.

/* Custom Metadata Types */

1.Summary
used to define application configurations that need to be migrated from one environment to another.

application configurations :
customize your app’s behavior not the busniess data.

2.Visibility
    control the visibility : public,protected.

3.SOQL query to retrive records.

4.Fields
    TextArea,Relationship Field.

5.DML Operation Possible.

6.During Deployement Along with metadata records too deploye.


Issue :
    RecordTypeId Store in Custom Setting.
        SOQL Query.
        Maintain Uniqueness and access with Schema Schema.SObjectType.objApiName.getRecordTypeInfosByName().get('Development').getRecordTypeId();

    Record from custom setting Does not deploye along with MetaData.
        Use Custom MetaDataType.

Use Cases Custom MetaData :
    1.Mapping
        Associate two objects.
        (Issue 1:
        Number of fields more than 800 .
        Create Two Object and associate both of them .
        From Metadata Fields will be control .)
    2.Busniess Rules.
        Route to different end point URL as per different values.
    3.Master Data.

    
Limitation :
    .No Cache so have to use soql query.
    .15 validation rule per object can use.

###Note :
Data not app specific then object.

Mapping :
##1 (mapping between account support levels and equipment)
1.QFB > Custom MetadataTypes > Threat Tier
Master Label	    Account Tier (Custom Field)	Vacation (Custom Field)
Bronze Option A	    Bronze	                    Deep Sea Beta Fishing
Bronze Option B	    Bronze	                    Base-two Jumping
Silver Option A	    Silver                  	Ziplining Over the Great Seg Fault
Silver Option B	    Silver	                    Scaling Mt. PaaS
Gold Option A	    Gold	                    Bug Bounty Hunting
Gold Option B	    Gold	                    Hiking the App-alachian Mountains

##2 VAT Tax (VAT rate for the countries )
1.QFB > Custom MetaData Types > VAT Data
 text field called Country Name with length 10.
 percent field called VAT Rate with default values.

Japan has a 10% VAT.
Germany has a 19% VAT.

##3
1.
Object Manager > Account > Fields and Relationship >
FieldType  FieldName       Field Values
Picklist . Support Level. Bronze, Silver, and Gold.

Create Account Records With Values
Stanley’s Sightseeing	Gold
Awesome Adventures	Silver
Lacy’s Holidays	Bronze

2. Object Manager  > New object > Vacation Package
FieldType  FieldName       Field Values
Picklist . Difficulty     . Easy and Hard.

Create Vacation Package With Values
Base-Two Jumping	    Hard
Deep-Sea Beta Fishing	Easy
Swim with Sharks	    Hard
Zipline	                Easy

3.Object Manager  > New object> Booking
Field Label	        API Name	        Data Type
Account	            Account_Booking__c	Master-Detail (Account)
Departure	        Departure__c	    Date
Vacation Package	Vacation_Package__c	Lookup (Vacation Package)

4.QFB > Custom MetadataTypes > New >
Accessories to SFA Field Mappings

Field Label	            Field Name	            Field Type	                    Other Options
Accessories Object	    Accessories_Object	    Metadata Relationship	        Related To: Entity Definition
SFA Field	            SFA_Field	            Metadata Relationship	        Related To: Field Definition.Controlling Object: SFA Object
Accessories Field	    Accessories_Field	    Metadata Relationship	        Related To: Field Definition. Controlling Object: Accessories Object


###Note 
Create a  Master-Detail Relationship based on Entity Definition,Field Defination.
Lookup Object and Field Defination.

SFA Object : OrgObjectApiname
SFA Fields : Respective ObjectField

Protection / visibility :

__MDT level : (all apex code in same manage pkg / over org)

Visibility	If this type is installed as part of a managed package:
All Apex code and APIs can use the type, and it is visible in Setup.
Only Apex code in the same managed package can see the type. The name 
of the type and record are visible if referenced in validation rules.

Field Level Security : (who can edit fields developeronly/permission holder/no body)
    Field Manageability	Who can change field values after records are installed via managed package?
        Only the package developer (via package upgrade)
        Any user with the Customize Application permission (package upgrades won't overwrite the value)
        No one

Record Level Security :(access in same package )
Protected .

Protected record : protected record created by non-subscriber user
can not be view subscriber can not view.

###
Manage Package :
Public record's subscriber ediatble field value can be change by subscriber.

UnManaged package :

Ex :

 VAT Data custom metadata type is set to protected.
 In subscriber org can be access inside apex class in same manage package.

Fields in metadatatype are upgradable and records are protected then
who can edit this field after they are uploaded and install in UnManaged
package ?

As it is UnManaged package it can be access by subscriber have an free
hand .


field manageability on the VAT Rate field to subscriber editable.
If your records are protected and included as part of a managed package,
who can edit the VAT Rate on the records?

Only Package developer can edit the record as it is managed package and 
records are protected.
In fact, subscriber editable fields on protected records are
essentially locked after release.


##
Create a Package .
Add Components > Type Of Component > Component Name .
upload.

Link Can be Downloaded any where.

After Installation During Upgradation Subscriber editable also means 
that you can’t overwrite your subscriber’s values through a 
package upgrade.


Convert Custom Setting :

replace apex with soql.



<apex:page controller="VATController">
    <apex:form >
        <apex:pageBlock title="VAT Rates" mode="edit">
            <apex:pageMessages />
            
            <apex:pageBlockButtons >
                <apex:commandButton action="{!save}" value="Save"/>
            </apex:pageBlockButtons>
            
            <apex:pageBlockTable value="{!VATs}" var="v">
                <apex:column value="{!v.MasterLabel}"/>
                <apex:column headerValue="Rate">
                    <apex:inputText value="{!v.Rate__c}"/>
                </apex:column>
                <apex:column headerValue="Default">
                    <apex:inputCheckbox value="{!v.Default__c}"/>
                </apex:column>
            </apex:pageBlockTable>
        </apex:pageBlock>
    </apex:form>
</apex:page>

public class VATController {
    
    public final List<VAT_Rate__mdt> VATs {get;set;}
    final Map<String, VAT_Rate__mdt> VATsByApiName {get; set;}
    
    public VATController() { 
        VATs = new List<VAT_Rate__mdt>();
        VATsByApiName = new Map<String, Vat_Rate__mdt>();
        for (VAT_Rate__mdt v : [SELECT QualifiedApiName, MasterLabel, Default__c, Rate__c
                                FROM VAT_Rate__mdt]) { 
                                    VATs.add(v);
                                    VATsByApiName.put(v.QualifiedApiName, v);
                                }
    }
    
    public PageReference save() {        
        
        // Create a metadata container.
        Metadata.DeployContainer container = new Metadata.DeployContainer();
        List<String> vatFullNames = new List<String>();
        for (String recordName : VATsByApiName.keySet()) {
            vatFullNames.add('VAT_Rate.' + recordName);
        }
        
        List<Metadata.Metadata> records = 
            Metadata.Operations.retrieve(Metadata.MetadataType.CustomMetadata, 
                                         vatFullNames);
        
        for (Metadata.Metadata record : records) {
            Metadata.CustomMetadata vatRecord = (Metadata.CustomMetadata) record;
            String vatRecordName = vatRecord.fullName.substringAfter('.');
            VAT_Rate__mdt vatToCopy = VATsByApiName.get(vatRecordName);
            
            for (Metadata.CustomMetadataValue vatRecValue : vatRecord.values) {
                vatRecValue.value = vatToCopy.get(vatRecValue.field);
            }
            
            // Add record to the container.
            container.addMetadata(vatRecord);
        }   
        
        // Deploy the container with the new components. 
        Id asyncResultId = Metadata.Operations.enqueueDeployment(container, null);
        
        return null;
    }
}           